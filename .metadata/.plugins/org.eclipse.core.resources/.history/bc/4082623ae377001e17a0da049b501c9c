#include "My_Timer.h"
#include "PID.h"
#include "LQ_GPT12_ENC.h"
#include "LQ_MPU6050_DMP.h"
#include "MyPWM.h"
#include "LQ_CCU6.h"
#include "MyEncoder.h"
#include "LQ_MotorServo.h"
#include "MyMPU6050.h"
#include <math.h>

char Stability_Flag = 0;
float Dynamic_zero_Roll;

int Timer_Count = 0;
float Pid_Out_L;
float Pid_Out_R;
float Pid_Out_F;

int Timer_Count0;
int Timer_Count1;
int Timer_Count2;
int Timer_Count3;

void MyTimer_Init(void)
{
    CCU6_InitConfig(CCU60, CCU6_Channel1, 2000);//定时器中断2ms
    CCU6_EnableInterrupt(CCU60,CCU6_Channel1);//中断使能
}

void CCU60_CH1_IRQHandler (void)
{
    /* 开启CPU中断  否则中断不可嵌套 */
    IfxCpu_enableInterrupts();
    // 清除中断标志
    IfxCcu6_clearInterruptStatusFlag(&MODULE_CCU60, IfxCcu6_InterruptSource_t13PeriodMatch);
    /* 用户代码 */
    //BLDC_Motor_Hall_Run(BLDCduty);//霍尔有感无刷，拨码到上面
    LQ_DMP_Read();
    Get_EncVal();
    Timer_Count0++;
    Timer_Count1++;
    Timer_Count2++;
    Timer_Count3++;

    // 超出最大角度动量轮和行进电机立即停止
    Motor_Stop();
    Stability_Judge();
///// ##########        左右平衡环       ##################
/////      #####  速度环 -> 角度环 -> 角速度 #########

    PID_Struct.omegar_expect_value = PID_Struct.Pid_Angle_out;
    omegar_PD(&PID_Struct,gyro[0]);
    if(Timer_Count0 == 5)
    {
        Timer_Count0 = 0;
        PID_Struct.Angle_expect_value = PID_Struct.Pid_Speed_out + Pitch_Angle_Mid;
        Angle_PID(&PID_Struct,Pitch,gyro[0]);
    }
    if(Timer_Count1 == 50)
    {
        Timer_Count1 = 0;
        Speed_PI(&PID_Struct,EncVal_L,EncVal_R);
    }

    //##########        前后平衡环       ##################20ms
    //       ########  速度环 -> 角度环  #########
    if(Timer_Count2 == 10)
    {
        Timer_Count2 = 0;
        if(PID_Struct.Front_expect_value != 0)
        {
            /////dongtailingdian动态零点
            //Dynamic_zero_Roll = sqrt((0.00003*EncVal_F * EncVal_F)*K);
            Dynamic_zero_Roll = atan((0.000028 * EncVal_F * EncVal_F)*K)*180/3.14159;
   //         if(EncVal_F <= 25 && EncVal_F >= 19)
   //             Dynamic_zero_Roll += 0.3;
//            if(EncVal_F < 0)
//                 Dynamic_zero_Roll = 0.0;
            Limit_Out(&Dynamic_zero_Roll,3,1);  // 19-0.41
        }
        PID_Struct.Balance_expect_value = PID_Struct.Pid_Front_Speed_out + Roll_Angle_Mid + Dynamic_zero_Roll;
        Front_Balance_PID(&PID_Struct,Roll,gyro[1]);
        Front_Speed_PI(&PID_Struct,EncVal_F);

    }

    //############## 转向环PD控制##############50ms
    if(Timer_Count3 == 15)
    {
        Turn_Angle_PID(&PID_Struct,Yaw,gyro[2]);
        Timer_Count3 = 0;
    }


    Pid_Out_L = PID_Struct.Pid_omegar_out + PID_Struct.Pid_Turn_Angle_out;
    Pid_Out_R = PID_Struct.Pid_omegar_out - PID_Struct.Pid_Turn_Angle_out;
    Pid_Out_F = PID_Struct.Pid_Balance_out;

    Limit_Out(&Pid_Out_L,9000,-9000);
    Limit_Out(&Pid_Out_R,9000,-9000);

    Motor_Ctrl(Pid_Out_L,Pid_Out_R);
    Front_Motor_Ctrl(&Pid_Out_F);

}










